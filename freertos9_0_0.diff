diff -ur ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/include/task.h source/include/task.h
--- ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/include/task.h	2016-05-20 17:23:52.000000000 -0700
+++ source/include/task.h	2017-04-20 17:06:03.000000000 -0700
@@ -1286,6 +1286,7 @@
  * \ingroup TaskUtils
  */
 TickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;
+uint64_t xTaskGetExtendedTickCount( void ) PRIVILEGED_FUNCTION;
 
 /**
  * task. h
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: BCC
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: CCS
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: CodeWarrior
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Common
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM7_AT91FR40008
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM7_AT91SAM7S
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM7_LPC2000
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM7_LPC23xx
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CA53_64_BIT
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CA9
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CM0
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CM3
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CM3_MPU
diff -ur ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h source/portable/GCC/ARM_CM4F/portmacro.h
--- ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h	2016-05-20 17:23:52.000000000 -0700
+++ source/portable/GCC/ARM_CM4F/portmacro.h	2017-04-25 13:05:23.000000000 -0700
@@ -113,7 +113,6 @@
 
 /* Architecture specifics. */
 #define portSTACK_GROWTH			( -1 )
-#define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 #define portBYTE_ALIGNMENT			8
 /*-----------------------------------------------------------*/
 
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CM4_MPU
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CM7
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CR5
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ARM_CRx_No_GIC
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ATMega323
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: AVR32_UC3
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: CORTUS_APS3
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: ColdFire_V2
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: H8S2329
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: HCS12
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: IA32_flat
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: MCF5235
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: MSP430F449
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: MicroBlaze
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: MicroBlazeV8
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: MicroBlazeV9
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: NiosII
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: PPC405_Xilinx
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: PPC440_Xilinx
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: RL78
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: RX100
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: RX600
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: RX600v2
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: STR75x
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable/GCC: TriCore_1782
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: IAR
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Keil
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: MPLAB
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: MSVC-MingW
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: MemMang
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: MikroC
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Paradigm
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: RVDS
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Renesas
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Rowley
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: SDCC
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Softune
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: Tasking
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: WizC
Only in ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/portable: oWatcom
diff -ur ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/tasks.c source/tasks.c
--- ../../src/FreeRTOSv9.0.0/FreeRTOS/Source/tasks.c	2016-05-20 17:23:52.000000000 -0700
+++ source/tasks.c	2017-04-20 17:06:03.000000000 -0700
@@ -395,6 +395,7 @@
 /* Other file private variables. --------------------------------*/
 PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
+PRIVILEGED_DATA static volatile uint64_t xExtendedTickCount 				= ( uint64_t) 0U;
 PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
@@ -1898,6 +1899,7 @@
 		xNextTaskUnblockTime = portMAX_DELAY;
 		xSchedulerRunning = pdTRUE;
 		xTickCount = ( TickType_t ) 0U;
+		xExtendedTickCount = ( uint64_t ) 0U;
 
 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
 		macro must be defined to configure the timer/counter used to generate
@@ -2137,6 +2139,19 @@
 
 	return xTicks;
 }
+
+uint64_t xTaskGetExtendedTickCount( void )
+{
+	uint64_t xExtendedTicks;
+
+	portENTER_CRITICAL();
+	{
+		xExtendedTicks = xExtendedTickCount;
+	}
+	portEXIT_CRITICAL();
+
+	return xExtendedTicks;
+}
 /*-----------------------------------------------------------*/
 
 TickType_t xTaskGetTickCountFromISR( void )
@@ -2416,6 +2431,8 @@
 		each stepped tick. */
 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 		xTickCount += xTicksToJump;
+		xExtendedTickCount += (uint64_t) xTicksToJump;
+		configASSERT((uint32_t) (xExtendedTickCount & 0xFFFFFFFFUL) == xTickCount);
 		traceINCREASE_TICK_COUNT( xTicksToJump );
 	}
 
@@ -2516,6 +2533,9 @@
 		delayed lists if it wraps to 0. */
 		xTickCount = xConstTickCount;
 
+		xExtendedTickCount = xExtendedTickCount + 1;
+		configASSERT((uint32_t) (xExtendedTickCount & 0xFFFFFFFFUL) == xTickCount);
+
 		if( xConstTickCount == ( TickType_t ) 0U )
 		{
 			taskSWITCH_DELAYED_LISTS();
